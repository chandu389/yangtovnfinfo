tosca_definitions_version: tosca_simple_yaml_1_2
description: Mavenir WRG complex- CVNF with multiple VDUs

imports:
  - cisco_nfv_sol001_types.yaml
  - etsi_nfv_sol001_vnfd_0_10_0_types.yaml

metadata:
  template_name: wrg_vnfd_mav
  template_author: Mavenir Systems
  template_version: '1.0'

dsl_definitions:
  descriptor_id: &descriptor_id b4b3da42-ed16-4dfa-9adc-cd078fc24b76
  provider: &provider Mavenir
  product_name: &product_name WRG
  software_version: &software_version '11.0'
  descriptor_version: &descriptor_version ''
  flavour_id: &flavour_id default
  flavour_description: &flavour_description Complex deployment
  vnfm: &vnfm Mavenir
###########################################################
#This file has multiple features on different VDU:        #
#Multi-Instance: SIPRE                                    #
#Volume: WRG                                              #
#SRIOV: VLB                                               #
#Available zone: SIPRE                                    #
###########################################################
node_types:
  Mavenir.WRG-SC-R-6-0-2-5:
    derived_from: tosca.nodes.nfv.VNF
    properties:
      descriptor_id:
        type: string
        #constraints: [ valid_values: [ *descriptor_id ] ]
        default: *descriptor_id
      provider:
        type: string
        #constraints: [ valid_values: [ *provider ] ]
        default: *provider
      product_name:
        type: string
        #constraints: [ valid_values: [ *product_name ] ]
        default: *product_name
      software_version:
        type: string
        #constraints: [ valid_values: [ *software_version ] ]
        default: *software_version
      descriptor_version:
        type: string
        #constraints: [ valid_values: [ *descriptor_version ] ]
        default: *descriptor_version
      flavour_id:
        type: string
        #constraints: [ valid_values: [ *flavour_id ] ]
        default: *flavour_id
      flavour_description:
        type: string
        #constraints: [ valid_values: [ *flavour_description ] ]
        default: *flavour_description
      vnfm_info:
        type: list
        entry_schema:
          type: string
        #constraints: [ valid_values: [ *vnfm ] ]
        default: [ *vnfm ]
      configurable_properties:
        type: tosca.datatypes.nfv.VnfConfigurableProperties
        description: VNF configurable parameters
        required: false
      lcm_operations_configuration:
        type: cisco.datatypes.nfv.VnfLcmOperationsConfiguration
        description: LCM configurable parameters
        required: false
    interfaces:
      Vnflcm:
        type: cisco.interfaces.nfv.Vnflcm
#    artifacts:

##################################
## Topology Template with Inputs ##
##################################
topology_template:
  inputs:
    GEN_FLAVOR:
      description: VIM Flavour for All VDUs
      type: string
      default: ''
    GEN_BOOTUP_TIME:
      description: The time taken for the image to boot
      type: string
      default: '600'
    CPU_NUM:
      description: number of CPUs for control function
      type: string
      default: '4'
    MEM_SIZE:
      description: control function virtudal memory size
      type: string
      default: '16GB'

    GEN_ADDR_PAIRS:
      description: general allowed address pair for IPV6
      type: string
      default: '::/0'

    GEN_ADDR_PAIRS4:
      description: general allowed address pair for IPV4
      type: string
      default: '0.0.0.0/0'

    GEN_IMAGE_FORMAT:
      description: VDU NAME
      type: string
      default: 'BARE'

    GEN_IMAGE_DISK_FORMAT:
      description: VDU NAME
      type: string
      default: 'QCOW2'

    GEN_IMAGE_MIN_DISK_SIZE:
      description: VDU NAME
      type: string
      default: '0'

    VNFD_ID:
      description: VNFD name
      type: string
      default: ''

    NSD_ID:
      description: NSD name
      type: string
      default: ''

    CMS_0_IP_ADDRESS1:
      description: CMS IP address
      type: string
      default: ''

    VNFM_0_IP_ADDRESS1:
      description: VNFM Ip address
      type: string
      default: ''


    NETWORK_VL_INTERNAL_SIG_CIDR:
      description: ip address range for internal signal network
      type: string
      default: '2001::0/64'

    NETWORK_VL_INTERNAL_SESS_DB_CIDR:
      description: ip address range for internal session db network
      type: string
      default: '2001::0/64'

    NETWORK_VL_INTERNAL_TUNNEL_CIDR:
      description: ip address range for internal tunnel network
      type: string
      default: '2001::0/64'

    NETWORK_VL_INTERNAL_H248_CIDR:
      description: ip address range for internal h248 network
      type: string
      default: '2001::0/64'

    DHCP_STATE:
      description: dhcp state
      type: boolean
      default: false


    VLB_NAME:
      description: VDU NAME
      type: string
      default: ''
    VLB_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    VLB_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    VLB_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    VLB_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    DIAMRE_NAME:
      description: VDU NAME
      type: string
      default: ''
    DIAMRE_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    DIAMRE_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    DIAMRE_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    DIAMRE_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    SIPRE_NAME:
      description: VDU NAME
      type: string
      default: ''
    SIPRE_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    SIPRE_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    SIPRE_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    SIPRE_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    GTRE_NAME:
      description: VDU NAME
      type: string
      default: ''
    GTRE_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    GTRE_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    GTRE_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    GTRE_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    SM_NAME:
      description: VDU NAME
      type: string
      default: ''
    SM_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    SM_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    SM_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    SM_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    MP_NAME:
      description: VDU NAME
      type: string
      default: ''
    MP_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    MP_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    MP_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    MP_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    UPC_NAME:
      description: VDU NAME
      type: string
      default: ''
    UPC_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    UPC_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    UPC_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    UPC_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''

    SC_NAME:
      description: VDU NAME
      type: string
      default: ''
    SC_SW_VERSION:
      description: VDU software Image
      type: string
      default: ''
    SC_IMAGE_NAME:
      description: VDU Image NAME
      type: string
      default: ''
    SC_IMAGE_CHECKSUM:
      description: VDU Image NAME
      type: string
      default: ''
    SC_IMAGE_SIZE:
      description: VDU NAME
      type: string
      default: ''


##VLB
#    VLB_OAM_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the OAM
#      type: string
#      default: ''
#
#    VLB_SIG1_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the SIG
#      type: string
#      default: ''
#
#    VLB_SIG2_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the SIG
#      type: string
#      default: ''
#
#    VLB_DB_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the SIG
#      type: string
#      default: ''

#    VLB_ICP01_IP_ADDR:
#      description: TAS VDUs allowed IP address pair for the Internal Connections
#      type: string
#      default: ''
#
#    VLB_ICP01_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the Internal Connections
#      type: string
#      default: ''
#
#    VLB_ICP02_IP_ADDR:
#      description: VLB VDUs allowed IP address for the Internal Connections-2
#      type: string
#      default: ''
#
#    VLB_ICP02_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the Internal Connections-2
#      type: string
#      default: ''
#
#    VLB_ICP03_IP_ADDR:
#      description: VLB VDUs allowed IP address for the Internal Connections-3
#      type: string
#      default: ''
#
#    VLB_ICP03_ADDR_PAIRS:
#      description: VLB VDUs allowed IP address pair for the Internal Connections-3
#      type: string
#      default: ''
#

##SIPRE

#    RE_OAM_ADDR_PAIRS:
#      description: SIPRE VDUs allowed IP address pair for the OAM
#      type: string
#      default: ''
#
#    SIPRE_ICP01_IP_ADDR:
#      description: SIPRE VDUs allowed IP address for the Internal Connections
#      type: string
#      default: ''
#
#    SIPRE_ICP01_ADDR_PAIRS:
#      description: SIPRE VDUs allowed IP address pair for the Internal Connections
#      type: string
#      default: ''
#
#    SIPRE_ICP02_IP_ADDR:
#      description: SIPRE VDUs allowed IP address for the Internal Connections-2
#      type: string
#      default: ''
#
#    SIPRE_ICP02_ADDR_PAIRS:
#      description: SIPRE VDUs allowed IP address pair for the Internal Connections
#      type: string
#      default: ''
#
#    SIPRE_ICP03_IP_ADDR:
#      description: SIPRE VDUs allowed IP address for the Internal Connections-3
#      type: string
#      default: ''
#
#    SIPRE_ICP03_ADDR_PAIRS:
#      description: SIPRE VDUs allowed IP address pair for the Internal Connections-3
#      type: string
#      default: ''
#

##DIAMRE

#    DIAMRE_OAM_ADDR_PAIRS:
#      description: DIAMRE VDUs IP allowed address pair for the OAM
#      type: string
#      default: ''
#
#    DIAMRE_ICP01_IP_ADDR:
#      description: DIAMRE VDUs allowed IP address for the Internal Connectionsns
#      type: string
#      default: ''
#
#    DIAMRE_ICP01_ADDR_PAIRS:
#      description: DIAMRE VDUs allowed IP address pair for the Internal Connection
#      type: string
#      default: ''
#
#    DIAMRE_ICP02_IP_ADDR:
#      description: DIAMRE VDUs allowed IP address for the Internal Connections-2
#      type: string
#      default: ''
#
#    DIAMRE_ICP02_ADDR_PAIRS:
#      description: DIAMRE VDUs allowed IP address pair for the Internal Connections-2
#      type: string
#      default: ''
#
#    DIAMRE_ICP03_IP_ADDR:
#      description: DIAMRE VDUs allowed IP address for the Internal Connections-3
#      type: string
#      default: ''
#
#    DIAMRE_ICP03_ADDR_PAIRS:
#      description: DIAMRE VDUs allowed IP address pair for the Internal Connections-3
#      type: string
#      default: ''
#
#
####GTRE
#
#    GTRE_OAM_ADDR_PAIRS:
#      description: GTRE VDUs IP allowed address pair for the OAM
#      type: string
#      default: ''
#
#    GTRE_ICP01_IP_ADDR:
#      description: GTRE VDUs allowed IP address for the Internal Connections
#      type: string
#      default: ''
#
#    GTRE_ICP01_ADDR_PAIRS:
#      description: GTRE VDUs allowed IP address pair for the Internal Connections
#      type: string
#      default: ''
#
#    GTRE_ICP02_IP_ADDR:
#      description: GTRE VDUs allowed IP address for the Internal Connections-2
#      type: string
#      default: ''
#
#    GTRE_ICP02_ADDR_PAIRS:
#      description: GTRE VDUs allowed IP address pair for the Internal Connections-2
#      type: string
#      default: ''
#
#    GTRE_ICP03_IP_ADDR:
#      description: GTRE VDUs allowed IP address for the Internal Connections-3
#      type: string
#      default: ''
#
#    GTRE_ICP03_ADDR_PAIRS:
#      description: GTRE VDUs allowed IP address pair for the Internal Connections-3
#      type: string
#      default: ''
#
#
####SM
#
#    SM_OAM_ADDR_PAIRS:
#      description: Service Manager (SM) VDUs allowed address pair for the OAM
#      type: string
#      default: ''
#
#    SM_ICP01_IP_ADDR:
#      description: SM VDUs allowed IP address for the Internal Connections
#      type: string
#      default: ''
#
#    SM_ICP01_ADDR_PAIRS:
#      description: SM VDUs allowed IP address pair for the Internal Connections
#      type: string
#      default: ''
#
#    SM_ICP02_IP_ADDR:
#      description: SM VDUs allowed IP address for the Internal Connections-2
#      type: string
#      default: ''
#
#    SM_ICP02_ADDR_PAIRS:
#      description: SM VDUs allowed IP address pair for the Internal Connections-2
#      type: string
#      default: ''
#
#    SM_ICP03_IP_ADDR:
#      description: SM VDUs allowed IP address for the Internal Connections-3
#      type: string
#      default: ''
#
#    SM_ICP03_ADDR_PAIRS:
#      description: SM VDUs allowed IP address pair for the Internal Connections-3
#      type: string
#      default: ''

#    Internal_SM_OAM_CP_IP1:
#      description: Static IP Adress for Internal connection point
#      type: string
#      default: ''

    Internal_SM_emx_CP_IP1:
      description: Static IP Adress for Internal connection point
      type: string
      default: ''

    Internal_SM_emx_CP_IP2:
      description: Static IP Adress for Internal connection point
      type: string
      default: ''

    START_IP_ADDR:
      description: Start IP Adress of the connection point
      type: string
      default: ''

    END_IP_ADDR:
      description: End IP Adress of the connection point
      type: string
      default: ''

    GATEWAY_INTERNAL_SIG_IP_ADDR:
      description: Gateway IP Adress of the connection point
      type: string
      default: ''

    GATEWAY_INTERNAL_SESS_DB_IP_ADDR:
      description: Gateway IP Adress of the connection point
      type: string
      default: ''

    GATEWAY_INTERNAL_TUNNEL_IP_ADDR:
      description: Gateway IP Adress of the connection point
      type: string
      default: ''

    GATEWAY_INTERNAL_H248_IP_ADDR:
      description: Gateway IP Adress of the connection point
      type: string
      default: ''

    VIM_NETWORK_ORCH_SEC_GRP_0:
      description: Security Group Name
      type: string
      default: ''

    VIM_NETWORK_ORCH_SEC_GRP_1:
      description: Security Group Name
      type: string
      default: ''

    SIPRE_IP1:
      description: SIPRE IP address
      type: string
      default: '10.1.50.241'

    SIPRE_IP2:
      description: SIPRE IP address
      type: string
      default: '10.1.50.242'

    SIPRE_IP3:
      description: SIPRE IP address
      type: string
      default: '10.1.50.243'

########################
# Substitution Mapping #
########################
## Ex: "Provider_TAS_OAM_VL" values to be mapped to "resourceId" in NFVO for the Mapping to Virtual Links
## Similarly for all the below listed
  substitution_mappings:
    node_type: Mavenir.WRG-SC-R-6-0-2-5
    requirements:
      - Provider_SM_OAM_VL: [ Provider_SM_OAM_CP, virtual_link ]
      - Provider_VLB_OAM_VL: [ Provider_VLB_OAM_CP, virtual_link ]
      - Provider_VLB_SIG1_VL: [ Provider_VLB_SIG_CP_01, virtual_link ]
      - Provider_VLB_SIG2_VL: [ Provider_VLB_SIG_CP_02, virtual_link ]
      - Provider_VLB_ACS1_VL: [ Provider_VLB_ACS_CP_01, virtual_link ]
      - Provider_VLB_ACS2_VL: [ Provider_VLB_ACS_CP_02, virtual_link ]
      - Provider_SIPRE_OAM_VL: [ Provider_SIPRE_OAM_CP, virtual_link ]
      - Provider_DIAM_RE_OAM_VL: [ Provider_DIAM_RE_OAM_CP, virtual_link ]
      - Provider_GTRE_OAM_VL: [ Provider_GTRE_OAM_CP, virtual_link ]
      - Provider_MP_OAM_VL: [ Provider_MP_OAM_CP, virtual_link ]
      - Provider_MP_ECM1_VL: [ Provider_MP_ECM_CP_01, virtual_link ]
      - Provider_MP_ECM2_VL: [ Provider_MP_ECM_CP_02, virtual_link ]
      - Provider_MP_ACM1_VL: [ Provider_MP_ACM_CP_01, virtual_link ]
      - Provider_MP_ACM2_VL: [ Provider_MP_ACM_CP_02, virtual_link ]
      - Provider_UPC_OAM_VL: [ Provider_UPC_OAM_CP, virtual_link ]
      - Provider_SC_OAM_VL: [ Provider_SC_OAM_CP, virtual_link ]


#########################
# Virtual Block Storage #
#########################
######################################
###  Nodes with VNF Configurations  ##
######################################
  node_templates:
    vnf:
      type: Mavenir.WRG-SC-R-6-0-2-5
      properties:
        descriptor_id: b4b3da42-ed16-4dfa-9adc-cd078fc24b76
        descriptor_version: ''
        provider: Mavenir
        product_name: WRG
        software_version: 11.0
        product_info_name: 'WRG'
        vnfm_info:
          - 'Mavenir'
        configurable_properties:
          is_autoscale_enabled: false
          is_autoheal_enabled: false
        lcm_operations_configuration:
          heal:
            recovery_action: REBOOT_THEN_REDEPLOY
            recovery_wait_time: 1
        flavour_id: default
        flavour_description: 'Complex deployment'


##################################
# VDUs configuration Parameters ##
##################################
#VDU- Service Manager
    VDU_SM:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: SM_NAME }
        description: VDU1 of the SM node for providing services
        boot_order:
          - VDU_SM_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
#        placement_enforcement: strict
#        placement_type: zone
#        placement_target: Zone-3
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/sm_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  SM_NAME: { get_input: SM_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_SM_Boot_Partition

    VDU_SM_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: SM_IMAGE_NAME }
          version: { get_input: SM_SW_VERSION }
          checksum: { get_input: SM_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: SM_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/SM.image.qcow2

#VDU- VLB
    VDU_VLB:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: VLB_NAME }
        description: VDUs active:standby (1:1) redundant pair of VLB VDUs
        boot_order:
          - VDU_VLB_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/vlb_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  VLB_NAME: { get_input: VLB_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_VLB_Boot_Partition

    VDU_VLB_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: VLB_IMAGE_NAME }
          version: { get_input: VLB_SW_VERSION }
          checksum: { get_input: VLB_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: VLB_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/VLB.image.qcow2

#VDU- SIP RE
    VDU_SIPRE:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: SIPRE_NAME }
        description: VDU1 of the SIPRE node for providing services
        boot_order:
          - VDU_SIPRE_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
#        placement_enforcement: strict
#        placement_type: zone
#        placement_target: Zone-3
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/sipre_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  SIPRE_NAME: { get_input: SIPRE_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_SIPRE_Boot_Partition

    VDU_SIPRE_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: SIPRE_IMAGE_NAME }
          version: { get_input: SIPRE_SW_VERSION }
          checksum: { get_input: SIPRE_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: SIPRE_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/SIPRE.image.qcow2

#VDU- Diameter RE
    VDU_DIAMRE:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: DIAMRE_NAME }
        description: VDU1 of the DIAMRE node for providing services
        boot_order:
          - VDU_DIAMRE_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/diamre_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  DIAMRE_NAME: { get_input: DIAMRE_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_DIAMRE_Boot_Partition

    VDU_DIAMRE_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: DIAMRE_IMAGE_NAME }
          version: { get_input: DIAMRE_SW_VERSION }
          checksum: { get_input: DIAMRE_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: DIAMRE_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/DIAMRE.image.qcow2

#VDU- GT RE
    VDU_GTRE:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: GTRE_NAME }
        description: VDU1 of the GTRE node for providing services
        boot_order:
          - VDU_GTRE_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/gtre_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  GTRE_NAME: { get_input: GTRE_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_GTRE_Boot_Partition

    VDU_GTRE_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: GTRE_IMAGE_NAME }
          version: { get_input: GTRE_SW_VERSION }
          checksum: { get_input: GTRE_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: GTRE_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/GTRE.image.qcow2

#VDU- MP
    VDU_MP:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: MP_NAME }
        description: VDU1 of the MP node for providing services
        boot_order:
          - VDU_MP_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/mp_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  MP_NAME: { get_input: MP_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_MP_Boot_Partition

    VDU_MP_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: MP_IMAGE_NAME }
          version: { get_input: MP_SW_VERSION }
          checksum: { get_input: MP_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: MP_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/MP.image.qcow2

#VDU- UPC
    VDU_UPC:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: UPC_NAME }
        description: VDU1 of the UPC node for providing services
        boot_order:
          - VDU_UPC_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/upc_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  UPC_NAME: { get_input: UPC_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_UPC_Boot_Partition

    VDU_UPC_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "80GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: UPC_IMAGE_NAME }
          version: { get_input: UPC_SW_VERSION }
          checksum: { get_input: UPC_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: UPC_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/UPC.image.qcow2

#VDU- SC
    VDU_SC:
      type: cisco.nodes.nfv.Vdu.Compute
      properties:
        name: { get_input: SC_NAME }
        description: VDU1 of the SC node for providing services
        boot_order:
          - VDU_SC_Boot_Partition
        configurable_properties:
          additional_vnfc_configurable_properties:
            vim_flavor: { get_input: GEN_FLAVOR }
            bootup_time: { get_input: GEN_BOOTUP_TIME }
        vdu_profile:
          min_number_of_instances: 1
          max_number_of_instances: 1
        kpi_data:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            metric_value: '1'
            metric_cond: 'GT'
            metric_type: 'UINT32'
            metric_occurrences_true: 1
            metric_occurrences_false: 30
            metric_collector:
              type: 'ICMPPing'
              nicid: 0
              address_id: 0
              poll_frequency: 10
              polling_unit: 'seconds'
              continuous_alarm: false
        admin_rules:
          VM_ALIVE-1:
            event_name: 'VM_ALIVE'
            action:
              - 'ALWAYS log'
              - 'FALSE recover autohealing'
              - 'TRUE esc_vm_alive_notification'
        vendor_section:
          cisco_esc:
            config_data:
              '--user-data':
                file: ../Files/Scripts/sc_config.txt
                variables:
                  VNFD_ID: { get_input: VNFD_ID }
                  SC_NAME: { get_input: SC_NAME }
                  NSD_ID: { get_input: NSD_ID }
                  CMS_0_IP_ADDRESS1: { get_input: CMS_0_IP_ADDRESS1 }
                  VNFM_0_IP_ADDRESS1: { get_input: VNFM_0_IP_ADDRESS1 }
      capabilities:
        virtual_compute:
           properties:
            virtual_cpu:
              num_virtual_cpu: { get_input: CPU_NUM }
            virtual_memory:
              virtual_mem_size: { get_input: MEM_SIZE }
      requirements:
        - virtual_storage: VDU_SC_Boot_Partition

    VDU_SC_Boot_Partition:
      type: cisco.nodes.nfv.Vdu.VirtualBlockStorage
      properties:
        virtual_block_storage_data:
          size_of_storage: "150GB"
          vdu_storage_requirements:
            vol_id: "1"
            bus: "ide"
            type: LUKS
        sw_image_data:
          name: { get_input: SC_IMAGE_NAME }
          version: { get_input: SC_SW_VERSION }
          checksum: { get_input: SC_IMAGE_CHECKSUM }
          container_format: { get_input: GEN_IMAGE_FORMAT }
          disk_format: { get_input: GEN_IMAGE_DISK_FORMAT }
          min_disk: { get_input: GEN_IMAGE_MIN_DISK_SIZE }
          size: { get_input: SC_IMAGE_SIZE }
      artifacts:
        sw_image:
          type: tosca.artifacts.nfv.SwImage
          file: ../Files/Images/SC.image.qcow2


#######################################
# Connection points Details for SM##
#######################################
    Provider_SM_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_SM
#        - virtual_link: # the target node is determined in the NSD "Provider_SM_OAM_VL"

    Internal_SM_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        ip_subnet:
          - ip_address: { get_input: Internal_SM_emx_CP_IP1}
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_SM

    Internal_SM_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        ip_subnet:
          - ip_address: { get_input: Internal_SM_emx_CP_IP2}
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_SM

#######################################
# Connection points Details for VLB##
#######################################
    Provider_VLB_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_VLB
#        - virtual_link: # the target node is determined in the NSD "Provider_VLB_OAM_VL"

    Internal_VLB_TUNNEL_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_01
        - virtual_binding: VDU_VLB

    Internal_VLB_TUNNEL_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_02
        - virtual_binding: VDU_VLB

    Internal_VLB_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 3
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_VLB

    Internal_VLB_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 4
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_VLB

    Internal_VLB_DB_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 5
        management: false
      requirements:
        - virtual_binding: VDU_VLB
        - virtual_link: Internal_DB_VL_01

    Internal_VLB_DB_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 6
        management: false
      requirements:
        - virtual_binding: VDU_VLB
        - virtual_link: Internal_DB_VL_02

    Provider_VLB_ACS_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 7
        management: true
        iface_type: direct
      requirements:
        - virtual_binding: VDU_VLB
#        - virtual_link: # the target node is determined in the NSD "Provider_VLB_ACS1_VL"

    Provider_VLB_ACS_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 8
        management: true
        iface_type: direct
      requirements:
        - virtual_binding: VDU_VLB
#        - virtual_link: # the target node is determined in the NSD "Provider_VLB_ACS2_VL"

## SIG1 Includes SIP/DNS/LDAP
    Provider_VLB_SIG_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 9
        management: false
        iface_type: direct
      requirements:
        - virtual_binding: VDU_VLB
#        - virtual_link: # the target node is determined in the NSD "Provider_VLB_SIG1_VL"

## SIG2 Includes different DAIMETER interfaces
    Provider_VLB_SIG_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 10
        iface_type: direct
        management: false
      requirements:
        - virtual_binding: VDU_VLB
#        - virtual_link: # the target node is determined in the NSD "Provider_VLB_SIG2_VL"

#######################################
# Connection points Details for SIPRE##
#######################################
    Provider_SIPRE_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv4
        protocol:
          - associated_layer_protocol: ipv4
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_SIPRE
#        - virtual_link: # the target node is determined in the NSD "Provider_SIPRE_OAM_VL"

    Internal_SIPRE_TUNNEL_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_01
        - virtual_binding: VDU_SIPRE

    Internal_SIPRE_TUNNEL_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_02
        - virtual_binding: VDU_SIPRE

    Internal_SIPRE_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 3
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_SIPRE

    Internal_SIPRE_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 4
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_SIPRE

    Internal_SIPRE_DB_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 5
        management: false
      requirements:
        - virtual_binding: VDU_SIPRE
        - virtual_link: Internal_DB_VL_01

    Internal_SIPRE_DB_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 6
        management: false
      requirements:
        - virtual_binding: VDU_SIPRE
        - virtual_link: Internal_DB_VL_02

#######################################
# Connection points Details for DIAMRE##
#######################################
    Provider_DIAM_RE_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_DIAMRE
#        - virtual_link: # the target node is determined in the NSD "Provider_DIAM_RE_OAM_VL"

    Internal_DIAMRE_TUNNEL_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_01
        - virtual_binding: VDU_DIAMRE

    Internal_DIAMRE_TUNNEL_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_02
        - virtual_binding: VDU_DIAMRE

    Internal_DIAMRE_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 3
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_DIAMRE

    Internal_DIAMRE_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 4
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_DIAMRE

    Internal_DIAMRE_DB_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 5
        management: false
      requirements:
        - virtual_binding: VDU_DIAMRE
        - virtual_link: Internal_DB_VL_01

    Internal_DIAMRE_DB_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 6
        management: false
      requirements:
        - virtual_binding: VDU_DIAMRE
        - virtual_link: Internal_DB_VL_02

#######################################
# Connection points Details for GTRE##
#######################################
    Provider_GTRE_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_GTRE
#        - virtual_link: # the target node is determined in the NSD "Provider_GTRE_OAM_VL"

    Internal_GTRE_TUNNEL_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_01
        - virtual_binding: VDU_GTRE

    Internal_GTRE_TUNNEL_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_02
        - virtual_binding: VDU_GTRE

    Internal_GTRE_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 3
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_GTRE

    Internal_GTRE_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 4
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_GTRE

    Internal_GTRE_DB_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 5
        management: false
      requirements:
        - virtual_binding: VDU_GTRE
        - virtual_link: Internal_DB_VL_01

    Internal_GTRE_DB_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 6
        management: false
      requirements:
        - virtual_binding: VDU_GTRE
        - virtual_link: Internal_DB_VL_02


#######################################
# Connection points Details for MP##
#######################################
    Provider_MP_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_MP
#        - virtual_link: # the target node is determined in the NSD "Provider_MP_OAM_VL"

    Internal_MP_DB_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 1
        management: false
      requirements:
        - virtual_binding: VDU_MP
        - virtual_link: Internal_DB_VL_01

    Internal_MP_DB_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 2
        management: false
      requirements:
        - virtual_binding: VDU_MP
        - virtual_link: Internal_DB_VL_02

    Provider_MP_ACM_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 3
        iface_type: direct
        management: true
      requirements:
        - virtual_binding: VDU_MP
#        - virtual_link: # the target node is determined in the NSD "Provider_MP_ACM1_VL"

    Provider_MP_ACM_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 4
        iface_type: direct
        management: true
      requirements:
        - virtual_binding: VDU_MP
#        - virtual_link: # the target node is determined in the NSD "Provider_MP_ACM2_VL"

    Provider_MP_ECM_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 5
        iface_type: direct
        management: true
      requirements:
        - virtual_binding: VDU_MP
#        - virtual_link: # the target node is determined in the NSD "Provider_MP_ECM1_VL"

    Provider_MP_ECM_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 6
        iface_type: direct
        management: true
      requirements:
        - virtual_binding: VDU_MP
#        - virtual_link: # the target node is determined in the NSD "Provider_MP_ECM2_VL"

    Internal_MP_H248_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 7
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_H248_VL_01
        - virtual_binding: VDU_MP

    Internal_MP_H248_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 8
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_H248_VL_02
        - virtual_binding: VDU_MP

    Internal_MP_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 9
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_MP

    Internal_MP_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 10
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_MP


#######################################
# Connection points Details for UPC##
#######################################
    Provider_UPC_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_UPC
#        - virtual_link: # the target node is determined in the NSD "Provider_UPC_OAM_VL"

    Internal_UPC_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_UPC

    Internal_UPC_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_UPC

    Internal_UPC_H248_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 3
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_H248_VL_01
        - virtual_binding: VDU_UPC

    Internal_UPC_H248_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 4
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_H248_VL_02
        - virtual_binding: VDU_UPC


#######################################
# Connection points Details for SC##
#######################################
#SSH/HTTP/HTTPS/SFTP/SNMP
    Provider_SC_OAM_CP:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS4 }
        trunk_mode: false
        order: 0
        management: true
      requirements:
        - virtual_binding: VDU_SC
#        - virtual_link: # the target node is determined in the NSD "Provider_TAS_SC_VL"

    Internal_SC_TUNNEL_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 1
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_01
        - virtual_binding: VDU_SC

    Internal_SC_TUNNEL_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 2
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_TUNNEL_VL_02
        - virtual_binding: VDU_SC

    Internal_SC_emx_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 3
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_01
        - virtual_binding: VDU_SC

    Internal_SC_emx_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 4
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_SIG_VL_02
        - virtual_binding: VDU_SC

    Internal_SC_DB_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 5
        management: false
      requirements:
        - virtual_link: Internal_DB_VL_01
        - virtual_binding: VDU_SC

    Internal_SC_DB_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: External Connection Point to access Outside
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
        trunk_mode: false
        order: 6
        management: false
      requirements:
        - virtual_binding: VDU_SC
        - virtual_link: Internal_DB_VL_02

    Internal_SC_H248_CP_01:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 7
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_H248_VL_01
        - virtual_binding: VDU_SC

    Internal_SC_H248_CP_02:
      type: cisco.nodes.nfv.VduCp
      properties:
        description: Internal Connection Point on VL
        layer_protocols:
          - ipv6
        protocol:
          - associated_layer_protocol: ipv6
        trunk_mode: false
        order: 8
        management: false
        allowed_address_pairs:
          - ip_address: { get_input: GEN_ADDR_PAIRS }
      requirements:
        - virtual_link:  Internal_H248_VL_02
        - virtual_binding: VDU_SC

##################################
# Internal Virtual Link Details ##
##################################
#There is slight changes with new additional attributes like: ip_allocation_pools and gateway_ip

    Internal_SIG_VL_01:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_SIG_CIDR }
#                ip_allocation_pools:
#                - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_SIG_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_SIG_VL_02:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_SIG_CIDR }
#                ip_allocation_pools:
#                - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_SIG_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_DB_VL_01:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_SESS_DB_CIDR }
#                ip_allocation_pools:
#               - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_SESS_DB_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_DB_VL_02:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_SESS_DB_CIDR }
#                ip_allocation_pools:
#               - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_SESS_DB_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_TUNNEL_VL_01:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_TUNNEL_CIDR }
#                ip_allocation_pools:
#                - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_TUNNEL_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_TUNNEL_VL_02:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_TUNNEL_CIDR }
#                ip_allocation_pools:
#                - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_TUNNEL_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_H248_VL_01:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_H248_CIDR }
#                ip_allocation_pools:
#                - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_H248_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

    Internal_H248_VL_02:
      type: tosca.nodes.nfv.VnfVirtualLink
      properties:
        connectivity_type:
          layer_protocols:
            - ipv6
        vl_profile:
          min_bitrate_requirements:
            root: 0
          max_bitrate_requirements:
            root: 100000000
          virtual_link_protocol_data:
            - associated_layer_protocol: ipv6
              l3_protocol_data:
                ip_version: ipv6
                cidr: { get_input: NETWORK_VL_INTERNAL_H248_CIDR }
#                ip_allocation_pools:
#                - start_ip_address: { get_input: START_IP_ADDR }
#                  end_ip_address: { get_input: END_IP_ADDR }
                gateway_ip: { get_input: GATEWAY_INTERNAL_H248_IP_ADDR }
                dhcp_enabled: { get_input: DHCP_STATE }

##############################################
####    Policy Configuration details      ####
##############################################

  policies:
    - scaling_aspects:
        type: tosca.policies.nfv.ScalingAspects
        properties:
          aspects:
            default_scaling_aspect:
              name: 'default_scaling_aspect'
              description: 'default scaling aspect'
              max_scale_level: 4
              step_deltas:
                - delta_1

    - instantiation_levels:
        type: tosca.policies.nfv.InstantiationLevels
        properties:
          levels:
            default:
              description: 'Default instantiation level'
              scale_info:
                default_scaling_aspect:
                  scale_level: 0
          default_level: default


    - vdu_initial_delta:
        type: tosca.policies.nfv.VduInitialDelta
        properties:
          initial_delta:
            number_of_instances: 1
        targets: [ VDU_VLB, VDU_SM, VDU_DIAMRE, VDU_GTRE, VDU_SC, VDU_MP, VDU_UPC ]

    - vdu_scaling_aspect_deltas:
        type: tosca.policies.nfv.VduScalingAspectDeltas
        properties:
          aspect: default_scaling_aspect
          deltas:
            delta_1:
              number_of_instances: 1
        targets: [ VDU_VLB, VDU_SM, VDU_DIAMRE, VDU_GTRE, VDU_SC, VDU_MP, VDU_UPC ]

    - vdu_instantiation_levels:
        type: tosca.policies.nfv.VduInstantiationLevels
        properties:
          levels:
            default:
              number_of_instances: 1
        targets: [ VDU_VLB, VDU_SM, VDU_DIAMRE, VDU_GTRE, VDU_SC, VDU_MP, VDU_UPC ]

    - SM_initial_delta:
        type: tosca.policies.nfv.VduInitialDelta
        properties:
          initial_delta:
            number_of_instances: 1
        targets: [ VDU_SIPRE ]

    - SM_scaling_aspect_deltas:
        type: tosca.policies.nfv.VduScalingAspectDeltas
        properties:
          aspect: default_scaling_aspect
          deltas:
            delta_1:
              number_of_instances: 1
        targets: [ VDU_SIPRE ]

    - SM_instantiation_levels:
        type: tosca.policies.nfv.VduInstantiationLevels
        properties:
          levels:
            default:
              number_of_instances: 1
        targets: [ VDU_SIPRE ]

    - policy_antiaffinity_1:
        type: tosca.policies.nfv.AntiAffinityRule
        targets: [ aa_group_1 ]
        properties:
          scope: 'nfvi_node'

    - policy_antiaffinity_2:
        type: tosca.policies.nfv.AntiAffinityRule
        targets: [ aa_group_2 ]
        properties:
          scope: 'nfvi_node'

    - vim_network_orch_sec_grp_0:
        type: cisco.policies.nfv.SecurityGroupRule
        properties:
          group_name: { get_input: VIM_NETWORK_ORCH_SEC_GRP_0 }
        targets: [ VDU_SM ]

    - vim_network_orch_sec_grp_1:
        type: cisco.policies.nfv.SecurityGroupRule
        properties:
          group_name: { get_input: VIM_NETWORK_ORCH_SEC_GRP_1 }
        targets: [ VDU_VLB ]

#######################
# Group configuration #
#######################
  groups:
    aa_group_1:
      type: tosca.groups.nfv.PlacementGroup
      members: [ VDU_VLB ]

    aa_group_2:
      type: tosca.groups.nfv.PlacementGroup
      members: [ VDU_SM ]
